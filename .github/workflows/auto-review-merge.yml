name: Claude Review and Merge

on:
  pull_request:
    types: [opened, synchronize]
  issue_comment:
    types: [created]

jobs:
  test-and-notify:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run comprehensive tests
        id: tests
        run: |
          # Run all test suites
          npm test || echo "TEST_FAILED=true" >> $GITHUB_OUTPUT
          
          # Run Playwright tests
          npx playwright install
          npm run test:e2e || echo "E2E_FAILED=true" >> $GITHUB_OUTPUT
          
          # Run linting
          npm run lint || echo "LINT_FAILED=true" >> $GITHUB_OUTPUT
          
      - name: Security scan
        id: security
        run: |
          # Check for vulnerabilities
          npm audit --audit-level=high || echo "SECURITY_FAILED=true" >> $GITHUB_OUTPUT
          
      - name: Performance tests
        id: performance
        run: |
          # Check bundle size
          npm run build || echo "BUILD_FAILED=true" >> $GITHUB_OUTPUT
          
      - name: Comment test results
        uses: actions/github-script@v7
        with:
          script: |
            const testsFailed = '${{ steps.tests.outputs.TEST_FAILED }}' === 'true';
            const e2eFailed = '${{ steps.tests.outputs.E2E_FAILED }}' === 'true';
            const lintFailed = '${{ steps.tests.outputs.LINT_FAILED }}' === 'true';
            const securityFailed = '${{ steps.security.outputs.SECURITY_FAILED }}' === 'true';
            const buildFailed = '${{ steps.performance.outputs.BUILD_FAILED }}' === 'true';
            
            let status = '## ü§ñ Automated Test Results\n\n';
            status += `- Unit Tests: ${testsFailed ? '‚ùå Failed' : '‚úÖ Passed'}\n`;
            status += `- E2E Tests: ${e2eFailed ? '‚ùå Failed' : '‚úÖ Passed'}\n`;
            status += `- Linting: ${lintFailed ? '‚ùå Failed' : '‚úÖ Passed'}\n`;
            status += `- Security: ${securityFailed ? '‚ùå Vulnerabilities found' : '‚úÖ Clean'}\n`;
            status += `- Build: ${buildFailed ? '‚ùå Failed' : '‚úÖ Successful'}\n\n`;
            
            if (testsFailed || e2eFailed || lintFailed || securityFailed || buildFailed) {
              status += '‚ö†Ô∏è **Issues detected. @claude please review and fix before merging.**\n';
            } else {
              status += '‚úÖ **All checks passed. @claude please review for final approval and merge if goals are 100% fulfilled.**\n';
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: status
            });

  claude-merge:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issue_comment' && 
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '@claude merge')
    
    steps:
      - name: Check permissions
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment;
            const allowedUsers = ['franzenzenhofer', 'claude[bot]'];
            
            if (!allowedUsers.includes(comment.user.login)) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '‚ùå Unauthorized: Only @franzenzenhofer or Claude can trigger merges.'
              });
              core.setFailed('Unauthorized user');
            }
            
      - name: Merge PR
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              merge_method: 'squash'
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '‚úÖ PR merged successfully by Claude after review.'
            });
            
      - name: Deploy to Cloudflare
        if: success()
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          # Checkout merged code
          git clone https://github.com/${{ github.repository }}.git deploy
          cd deploy
          
          # Install wrangler
          npm install -g wrangler
          
          # Deploy to Cloudflare Pages
          wrangler pages deploy . --project-name=claude-code-primer --commit-dirty=true